int trap(vector<int>& height) {
        int l_max = 0,r_max = 0;
        int count  = 0;
        int low = 0, high = height.size()-1;
        while(low<=high){
            if(height[low]<height[high]){
                if(l_max>=height[low])
                    count+=l_max-height[low++];
                else
                    l_max = height[low++];
            }
            else{
                    if(r_max >= height[high])
                        count+=r_max-height[high--];
                    else
                        r_max = height[high--];
            }
        }
        
        return count;
    }



method -2 
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        vector<int> left_premax(n,0);
        vector<int> right_premax(n,0);
        int temp =0;
        
        for(int i = 0; i <n; i++ ){
            left_premax[i] = max(temp,height[i]);
            temp = max(height[i],temp);
        }
        temp = 0;
        for(int i = n-1; i >= 0; i-- ){
            right_premax[i] = max(temp,height[i]);
            temp = max(height[i],temp);
        }
        int ans = 0;
        for(int i= 0; i < n;i++){
            ans = ans + min(left_premax[i],right_premax[i]) - height[i];
        }
        return ans;
    }
};