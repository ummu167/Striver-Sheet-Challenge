class Solution {
public:
    bool check(int col,int row,vector<string> &board,int n){
        int i = col,j = row;
        while(i >= 0){
            if(board[j][i]=='Q')
                return false;
            i--;
        }
        i = col,j = row;
        while(i >= 0 && j >= 0){
            if(board[j][i]=='Q')
                return false;
            j--;
            i--;
        }
        i = col,j = row;
        while(j < n && i >= 0){
            if(board[j][i] == 'Q')
                return false;
            i--;
            j++;
        }
        return true;
    }
public:
    void solve(int col,vector<string> &board,vector<vector<string>> &ans,int n){
        if(col == n){
            ans.push_back(board);
            return;
        }
        for(int row = 0;row < n;row++){
            if(check(col,row,board,n)){
                board[row][col] = 'Q';
                solve(col+1,board,ans,n);
                board[row][col] = '.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string>board(n);
        string s(n,'.');
        for(int i = 0;i < n;i++){
            board[i] = s;
        }
        solve(0,board,ans,n);
        return ans;
    }
};