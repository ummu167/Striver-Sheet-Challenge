/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 
 Node *merge(Node *l1, Node *l2){
    Node *dummynode = new Node(-1);
    Node *res = dummynode;
    
    while(l1 && l2){
        if(l1 -> data >= l2 -> data){
            res -> bottom = l2;
            res = l2;
            l2 = l2 -> bottom;
        }
        else{
            res -> bottom = l1;
            res = l1;
            l1 = l1 -> bottom;
        }
        res -> next = NULL;
    }
    if(l1) 
        res -> bottom = l1;
    else
        res -> bottom = l2;
    if(dummynode->bottom) 
        dummynode -> bottom -> next = NULL;
    return dummynode -> bottom;
}

Node *flatten(Node *root)
{
   // Your code here
   if(root == NULL || root -> next == NULL) return root;
   Node *mergehead = flatten(root -> next);

   return merge(root,mergehead);
   
}